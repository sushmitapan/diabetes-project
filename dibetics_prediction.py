# -*- coding: utf-8 -*-
"""dibetics prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tM1uta4zqQg9kVJplmoxhRMVpp__wQ_4
"""

#Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# import plotly.express as px
# import plotly.graph_objects as go

#Data Preprocessing
from sklearn.model_selection import train_test_split
# from sklearn.preprocessing import StandardScaler, MinMaxScaler

data = pd.read_csv('/content/diabetes.csv')
data.head()

row,col = data.shape
print(row)
print(col)

# There is not NaN or null values in columns
data.info()

data.describe()

select_col = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']

select_col_df = data[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']]
select_col_df = select_col_df.describe()
select_col_df

mean_value = select_col_df.iloc[1:2,:]
mean_value

mean_value = select_col_df.iloc[1:2,:].values[0]
mean_value

data['BloodPressure'].median()

# Replacing the values equal to 0 by the median
for col in select_col:
    data[col].replace(0, data[col].median(), inplace=True)
    # print(data[col])
    # print(data.loc[:,col])

# print(col)
# data.loc[:,col].median()

data

data_counts = data['Outcome'].value_counts()
non_diab = data[data['Outcome'] == 0].iloc[0:268]
daib = data[data['Outcome'] == 1]
data1 = pd.concat([non_diab,daib]).sample(frac = 1)
data1['Outcome'].value_counts()

data.describe()

plt.figure(figsize=(16,9))
corr = data.corr()
sns.heatmap(corr, annot=True, cmap='Set1')
plt.show()

# training and normalization of data
X = data.iloc[:,:8].values
Y = data.iloc[:,8:].values


X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.20, random_state=1)

# SScaler = StandardScaler()
# X_train = SScaler.fit_transform(X_train)
# X_test = SScaler.fit_transform(X_test)



# # Fitting Linear Regression to the dataset
# from sklearn.linear_model import LinearRegression
# lr = LinearRegression()
# lr.fit(X_train,Y_train)

from sklearn.linear_model import LogisticRegressionCV
model = LogisticRegressionCV(cv=8, max_iter=800)
model.fit(X_train,Y_train)
prediction = model.predict(X_test)

test_data = data.iloc[101:102]
output = test_data['Outcome']
test_data.drop(['Outcome'], axis = 1, inplace = True)
print("Predicted output = ",model.predict(test_data)[0])
print("Actual Output = ", output.values[0])

print("The train accuracy score = ",round(model.score(X_train,Y_train)*100,2))
print("The test accuracy score = ",round(model.score(X_test,Y_test)*100,2))

from sklearn.metrics import confusion_matrix, classification_report
conf_matrix = confusion_matrix(Y_test,prediction)
print(conf_matrix)

sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.xlabel("Predicted Labels")
plt.ylabel("Actual Labels")
plt.title("Confusion Matrix")
plt.show()

print(classification_report(Y_test,prediction))

